// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EProtoExecutionSite {
    k_EProtoExecutionSiteUnknown = 0,
    k_EProtoExecutionSiteSteamClient = 3,
}

impl ::protobuf::ProtobufEnum for EProtoExecutionSite {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EProtoExecutionSite> {
        match value {
            0 => ::std::option::Option::Some(EProtoExecutionSite::k_EProtoExecutionSiteUnknown),
            3 => ::std::option::Option::Some(EProtoExecutionSite::k_EProtoExecutionSiteSteamClient),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EProtoExecutionSite] = &[
            EProtoExecutionSite::k_EProtoExecutionSiteUnknown,
            EProtoExecutionSite::k_EProtoExecutionSiteSteamClient,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<EProtoExecutionSite>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("EProtoExecutionSite", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for EProtoExecutionSite {
}

impl ::protobuf::reflect::ProtobufValue for EProtoExecutionSite {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x2e, 0x73, 0x74, 0x65, 0x61, 0x6d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
    0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x65,
    0x61, 0x6d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
    0x12, 0x04, 0x64, 0x6f, 0x74, 0x61, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
    0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0x5d, 0x0a, 0x13, 0x45, 0x50, 0x72, 0x6f,
    0x74, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x12,
    0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75,
    0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10,
    0x00, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45, 0x78, 0x65,
    0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x53, 0x74, 0x65, 0x61, 0x6d, 0x43,
    0x6c, 0x69, 0x65, 0x6e, 0x74, 0x10, 0x03, 0x3a, 0x41, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
    0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd0, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x12, 0x1d,
    0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
    0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x64,
    0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x52, 0x0a, 0x13, 0x73, 0x65,
    0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
    0x6e, 0x18, 0xd0, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
    0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x72, 0x76,
    0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76,
    0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x90,
    0x01, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75,
    0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0xd8, 0x86, 0x03, 0x20, 0x01, 0x28,
    0x0e, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x74, 0x61, 0x2e, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45,
    0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x67,
    0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
    0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x1c, 0x6b,
    0x5f, 0x45, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
    0x53, 0x69, 0x74, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x14, 0x73, 0x65, 0x72,
    0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x74,
    0x65, 0x3a, 0x4f, 0x0a, 0x12, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63,
    0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd0, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x12,
    0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
    0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
    0x11, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
    0x6f, 0x6e, 0x3a, 0x49, 0x0a, 0x10, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
    0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd0, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x12, 0x1c,
    0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
    0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0f, 0x65, 0x6e,
    0x75, 0x6d, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x59, 0x0a,
    0x16, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63,
    0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd0, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x12,
    0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
    0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
    0x6e, 0x73, 0x52, 0x14, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x65, 0x73,
    0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x05, 0x48, 0x01, 0x80, 0x01, 0x00, 0x4a,
    0xae, 0x06, 0x0a, 0x06, 0x12, 0x04, 0x00, 0x00, 0x21, 0x01, 0x0a, 0x08, 0x0a, 0x01, 0x0c, 0x12,
    0x03, 0x00, 0x00, 0x12, 0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x02, 0x08, 0x0c, 0x0a, 0x09,
    0x0a, 0x02, 0x03, 0x00, 0x12, 0x03, 0x04, 0x07, 0x29, 0x0a, 0x08, 0x0a, 0x01, 0x08, 0x12, 0x03,
    0x06, 0x00, 0x1c, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07, 0x00, 0x12, 0x03, 0x06, 0x00, 0x1c,
    0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x06, 0x07, 0x13, 0x0a, 0x0d,
    0x0a, 0x06, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x06, 0x07, 0x13, 0x0a, 0x0e, 0x0a,
    0x07, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x06, 0x07, 0x13, 0x0a, 0x0c, 0x0a,
    0x05, 0x08, 0xe7, 0x07, 0x00, 0x03, 0x12, 0x03, 0x06, 0x16, 0x1b, 0x0a, 0x08, 0x0a, 0x01, 0x08,
    0x12, 0x03, 0x07, 0x00, 0x23, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07, 0x01, 0x12, 0x03, 0x07,
    0x00, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x01, 0x02, 0x12, 0x03, 0x07, 0x07, 0x1a,
    0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x01, 0x02, 0x00, 0x12, 0x03, 0x07, 0x07, 0x1a, 0x0a,
    0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x07, 0x07, 0x1a, 0x0a,
    0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x01, 0x03, 0x12, 0x03, 0x07, 0x1d, 0x22, 0x0a, 0x09, 0x0a,
    0x01, 0x07, 0x12, 0x04, 0x09, 0x00, 0x0b, 0x01, 0x0a, 0x09, 0x0a, 0x02, 0x07, 0x00, 0x12, 0x03,
    0x0a, 0x08, 0x2c, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x00, 0x02, 0x12, 0x03, 0x09, 0x07, 0x23, 0x0a,
    0x0a, 0x0a, 0x03, 0x07, 0x00, 0x04, 0x12, 0x03, 0x0a, 0x08, 0x10, 0x0a, 0x0a, 0x0a, 0x03, 0x07,
    0x00, 0x05, 0x12, 0x03, 0x0a, 0x11, 0x17, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x00, 0x01, 0x12, 0x03,
    0x0a, 0x18, 0x23, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x00, 0x03, 0x12, 0x03, 0x0a, 0x26, 0x2b, 0x0a,
    0x09, 0x0a, 0x01, 0x07, 0x12, 0x04, 0x0d, 0x00, 0x10, 0x01, 0x0a, 0x09, 0x0a, 0x02, 0x07, 0x01,
    0x12, 0x03, 0x0e, 0x08, 0x34, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x01, 0x02, 0x12, 0x03, 0x0d, 0x07,
    0x25, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x01, 0x04, 0x12, 0x03, 0x0e, 0x08, 0x10, 0x0a, 0x0a, 0x0a,
    0x03, 0x07, 0x01, 0x05, 0x12, 0x03, 0x0e, 0x11, 0x17, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x01, 0x01,
    0x12, 0x03, 0x0e, 0x18, 0x2b, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x01, 0x03, 0x12, 0x03, 0x0e, 0x2e,
    0x33, 0x0a, 0x09, 0x0a, 0x02, 0x07, 0x02, 0x12, 0x03, 0x0f, 0x08, 0x6d, 0x0a, 0x0a, 0x0a, 0x03,
    0x07, 0x02, 0x02, 0x12, 0x03, 0x0d, 0x07, 0x25, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x02, 0x04, 0x12,
    0x03, 0x0f, 0x08, 0x10, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x02, 0x06, 0x12, 0x03, 0x0f, 0x11, 0x24,
    0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x02, 0x01, 0x12, 0x03, 0x0f, 0x25, 0x3b, 0x0a, 0x0a, 0x0a, 0x03,
    0x07, 0x02, 0x03, 0x12, 0x03, 0x0f, 0x3e, 0x43, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x02, 0x08, 0x12,
    0x03, 0x0f, 0x44, 0x6c, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x02, 0x07, 0x12, 0x03, 0x0f, 0x4f, 0x6b,
    0x0a, 0x09, 0x0a, 0x01, 0x07, 0x12, 0x04, 0x12, 0x00, 0x14, 0x01, 0x0a, 0x09, 0x0a, 0x02, 0x07,
    0x03, 0x12, 0x03, 0x13, 0x08, 0x33, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x03, 0x02, 0x12, 0x03, 0x12,
    0x07, 0x24, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x03, 0x04, 0x12, 0x03, 0x13, 0x08, 0x10, 0x0a, 0x0a,
    0x0a, 0x03, 0x07, 0x03, 0x05, 0x12, 0x03, 0x13, 0x11, 0x17, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x03,
    0x01, 0x12, 0x03, 0x13, 0x18, 0x2a, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x03, 0x03, 0x12, 0x03, 0x13,
    0x2d, 0x32, 0x0a, 0x09, 0x0a, 0x01, 0x07, 0x12, 0x04, 0x16, 0x00, 0x18, 0x01, 0x0a, 0x09, 0x0a,
    0x02, 0x07, 0x04, 0x12, 0x03, 0x17, 0x08, 0x31, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x04, 0x02, 0x12,
    0x03, 0x16, 0x07, 0x22, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x04, 0x04, 0x12, 0x03, 0x17, 0x08, 0x10,
    0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x04, 0x05, 0x12, 0x03, 0x17, 0x11, 0x17, 0x0a, 0x0a, 0x0a, 0x03,
    0x07, 0x04, 0x01, 0x12, 0x03, 0x17, 0x18, 0x28, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x04, 0x03, 0x12,
    0x03, 0x17, 0x2b, 0x30, 0x0a, 0x09, 0x0a, 0x01, 0x07, 0x12, 0x04, 0x1a, 0x00, 0x1c, 0x01, 0x0a,
    0x09, 0x0a, 0x02, 0x07, 0x05, 0x12, 0x03, 0x1b, 0x08, 0x37, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x05,
    0x02, 0x12, 0x03, 0x1a, 0x07, 0x27, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x05, 0x04, 0x12, 0x03, 0x1b,
    0x08, 0x10, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x05, 0x05, 0x12, 0x03, 0x1b, 0x11, 0x17, 0x0a, 0x0a,
    0x0a, 0x03, 0x07, 0x05, 0x01, 0x12, 0x03, 0x1b, 0x18, 0x2e, 0x0a, 0x0a, 0x0a, 0x03, 0x07, 0x05,
    0x03, 0x12, 0x03, 0x1b, 0x31, 0x36, 0x0a, 0x0a, 0x0a, 0x02, 0x05, 0x00, 0x12, 0x04, 0x1e, 0x00,
    0x21, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x00, 0x01, 0x12, 0x03, 0x1e, 0x05, 0x18, 0x0a, 0x0b,
    0x0a, 0x04, 0x05, 0x00, 0x02, 0x00, 0x12, 0x03, 0x1f, 0x08, 0x29, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x1f, 0x08, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02,
    0x00, 0x02, 0x12, 0x03, 0x1f, 0x27, 0x28, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x01, 0x12,
    0x03, 0x20, 0x08, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x20,
    0x08, 0x28, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x20, 0x2b, 0x2c,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
