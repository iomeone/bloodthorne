// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ETournamentTemplate {
    k_ETournamentTemplate_None = 0,
    k_ETournamentTemplate_AutomatedWin3 = 1,
}

impl ::protobuf::ProtobufEnum for ETournamentTemplate {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ETournamentTemplate> {
        match value {
            0 => ::std::option::Option::Some(ETournamentTemplate::k_ETournamentTemplate_None),
            1 => ::std::option::Option::Some(ETournamentTemplate::k_ETournamentTemplate_AutomatedWin3),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ETournamentTemplate] = &[
            ETournamentTemplate::k_ETournamentTemplate_None,
            ETournamentTemplate::k_ETournamentTemplate_AutomatedWin3,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<ETournamentTemplate>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ETournamentTemplate", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ETournamentTemplate {
}

impl ::protobuf::reflect::ProtobufValue for ETournamentTemplate {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ETournamentGameState {
    k_ETournamentGameState_Unknown = 0,
    k_ETournamentGameState_Canceled = 1,
    k_ETournamentGameState_Scheduled = 2,
    k_ETournamentGameState_Active = 3,
    k_ETournamentGameState_RadVictory = 20,
    k_ETournamentGameState_DireVictory = 21,
    k_ETournamentGameState_RadVictoryByForfeit = 22,
    k_ETournamentGameState_DireVictoryByForfeit = 23,
    k_ETournamentGameState_ServerFailure = 40,
    k_ETournamentGameState_NotNeeded = 41,
}

impl ::protobuf::ProtobufEnum for ETournamentGameState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ETournamentGameState> {
        match value {
            0 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_Unknown),
            1 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_Canceled),
            2 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_Scheduled),
            3 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_Active),
            20 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_RadVictory),
            21 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_DireVictory),
            22 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_RadVictoryByForfeit),
            23 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_DireVictoryByForfeit),
            40 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_ServerFailure),
            41 => ::std::option::Option::Some(ETournamentGameState::k_ETournamentGameState_NotNeeded),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ETournamentGameState] = &[
            ETournamentGameState::k_ETournamentGameState_Unknown,
            ETournamentGameState::k_ETournamentGameState_Canceled,
            ETournamentGameState::k_ETournamentGameState_Scheduled,
            ETournamentGameState::k_ETournamentGameState_Active,
            ETournamentGameState::k_ETournamentGameState_RadVictory,
            ETournamentGameState::k_ETournamentGameState_DireVictory,
            ETournamentGameState::k_ETournamentGameState_RadVictoryByForfeit,
            ETournamentGameState::k_ETournamentGameState_DireVictoryByForfeit,
            ETournamentGameState::k_ETournamentGameState_ServerFailure,
            ETournamentGameState::k_ETournamentGameState_NotNeeded,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<ETournamentGameState>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ETournamentGameState", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ETournamentGameState {
}

impl ::protobuf::reflect::ProtobufValue for ETournamentGameState {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ETournamentTeamState {
    k_ETournamentTeamState_Unknown = 0,
    k_ETournamentTeamState_Node1 = 1,
    k_ETournamentTeamState_NodeMax = 1024,
    k_ETournamentTeamState_Eliminated = 14003,
    k_ETournamentTeamState_Forfeited = 14004,
    k_ETournamentTeamState_Finished1st = 15001,
    k_ETournamentTeamState_Finished2nd = 15002,
    k_ETournamentTeamState_Finished3rd = 15003,
    k_ETournamentTeamState_Finished4th = 15004,
    k_ETournamentTeamState_Finished5th = 15005,
    k_ETournamentTeamState_Finished6th = 15006,
    k_ETournamentTeamState_Finished7th = 15007,
    k_ETournamentTeamState_Finished8th = 15008,
    k_ETournamentTeamState_Finished9th = 15009,
    k_ETournamentTeamState_Finished10th = 15010,
    k_ETournamentTeamState_Finished11th = 15011,
    k_ETournamentTeamState_Finished12th = 15012,
    k_ETournamentTeamState_Finished13th = 15013,
    k_ETournamentTeamState_Finished14th = 15014,
    k_ETournamentTeamState_Finished15th = 15015,
    k_ETournamentTeamState_Finished16th = 15016,
}

impl ::protobuf::ProtobufEnum for ETournamentTeamState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ETournamentTeamState> {
        match value {
            0 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Unknown),
            1 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Node1),
            1024 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_NodeMax),
            14003 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Eliminated),
            14004 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Forfeited),
            15001 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished1st),
            15002 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished2nd),
            15003 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished3rd),
            15004 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished4th),
            15005 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished5th),
            15006 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished6th),
            15007 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished7th),
            15008 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished8th),
            15009 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished9th),
            15010 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished10th),
            15011 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished11th),
            15012 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished12th),
            15013 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished13th),
            15014 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished14th),
            15015 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished15th),
            15016 => ::std::option::Option::Some(ETournamentTeamState::k_ETournamentTeamState_Finished16th),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ETournamentTeamState] = &[
            ETournamentTeamState::k_ETournamentTeamState_Unknown,
            ETournamentTeamState::k_ETournamentTeamState_Node1,
            ETournamentTeamState::k_ETournamentTeamState_NodeMax,
            ETournamentTeamState::k_ETournamentTeamState_Eliminated,
            ETournamentTeamState::k_ETournamentTeamState_Forfeited,
            ETournamentTeamState::k_ETournamentTeamState_Finished1st,
            ETournamentTeamState::k_ETournamentTeamState_Finished2nd,
            ETournamentTeamState::k_ETournamentTeamState_Finished3rd,
            ETournamentTeamState::k_ETournamentTeamState_Finished4th,
            ETournamentTeamState::k_ETournamentTeamState_Finished5th,
            ETournamentTeamState::k_ETournamentTeamState_Finished6th,
            ETournamentTeamState::k_ETournamentTeamState_Finished7th,
            ETournamentTeamState::k_ETournamentTeamState_Finished8th,
            ETournamentTeamState::k_ETournamentTeamState_Finished9th,
            ETournamentTeamState::k_ETournamentTeamState_Finished10th,
            ETournamentTeamState::k_ETournamentTeamState_Finished11th,
            ETournamentTeamState::k_ETournamentTeamState_Finished12th,
            ETournamentTeamState::k_ETournamentTeamState_Finished13th,
            ETournamentTeamState::k_ETournamentTeamState_Finished14th,
            ETournamentTeamState::k_ETournamentTeamState_Finished15th,
            ETournamentTeamState::k_ETournamentTeamState_Finished16th,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<ETournamentTeamState>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ETournamentTeamState", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ETournamentTeamState {
}

impl ::protobuf::reflect::ProtobufValue for ETournamentTeamState {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ETournamentState {
    k_ETournamentState_Unknown = 0,
    k_ETournamentState_CanceledByAdmin = 1,
    k_ETournamentState_Completed = 2,
    k_ETournamentState_Merged = 3,
    k_ETournamentState_ServerFailure = 4,
    k_ETournamentState_TeamAbandoned = 5,
    k_ETournamentState_TeamTimeoutForfeit = 6,
    k_ETournamentState_TeamTimeoutRefund = 7,
    k_ETournamentState_InProgress = 100,
    k_ETournamentState_WaitingToMerge = 101,
}

impl ::protobuf::ProtobufEnum for ETournamentState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ETournamentState> {
        match value {
            0 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_Unknown),
            1 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_CanceledByAdmin),
            2 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_Completed),
            3 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_Merged),
            4 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_ServerFailure),
            5 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_TeamAbandoned),
            6 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_TeamTimeoutForfeit),
            7 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_TeamTimeoutRefund),
            100 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_InProgress),
            101 => ::std::option::Option::Some(ETournamentState::k_ETournamentState_WaitingToMerge),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ETournamentState] = &[
            ETournamentState::k_ETournamentState_Unknown,
            ETournamentState::k_ETournamentState_CanceledByAdmin,
            ETournamentState::k_ETournamentState_Completed,
            ETournamentState::k_ETournamentState_Merged,
            ETournamentState::k_ETournamentState_ServerFailure,
            ETournamentState::k_ETournamentState_TeamAbandoned,
            ETournamentState::k_ETournamentState_TeamTimeoutForfeit,
            ETournamentState::k_ETournamentState_TeamTimeoutRefund,
            ETournamentState::k_ETournamentState_InProgress,
            ETournamentState::k_ETournamentState_WaitingToMerge,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<ETournamentState>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ETournamentState", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ETournamentState {
}

impl ::protobuf::reflect::ProtobufValue for ETournamentState {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ETournamentNodeState {
    k_ETournamentNodeState_Unknown = 0,
    k_ETournamentNodeState_Canceled = 1,
    k_ETournamentNodeState_TeamsNotYetAssigned = 2,
    k_ETournamentNodeState_InBetweenGames = 3,
    k_ETournamentNodeState_GameInProgress = 4,
    k_ETournamentNodeState_A_Won = 5,
    k_ETournamentNodeState_B_Won = 6,
    k_ETournamentNodeState_A_WonByForfeit = 7,
    k_ETournamentNodeState_B_WonByForfeit = 8,
    k_ETournamentNodeState_A_Bye = 9,
    k_ETournamentNodeState_A_Abandoned = 10,
    k_ETournamentNodeState_ServerFailure = 11,
    k_ETournamentNodeState_A_TimeoutForfeit = 12,
    k_ETournamentNodeState_A_TimeoutRefund = 13,
}

impl ::protobuf::ProtobufEnum for ETournamentNodeState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ETournamentNodeState> {
        match value {
            0 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_Unknown),
            1 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_Canceled),
            2 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_TeamsNotYetAssigned),
            3 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_InBetweenGames),
            4 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_GameInProgress),
            5 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_Won),
            6 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_B_Won),
            7 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_WonByForfeit),
            8 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_B_WonByForfeit),
            9 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_Bye),
            10 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_Abandoned),
            11 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_ServerFailure),
            12 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_TimeoutForfeit),
            13 => ::std::option::Option::Some(ETournamentNodeState::k_ETournamentNodeState_A_TimeoutRefund),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ETournamentNodeState] = &[
            ETournamentNodeState::k_ETournamentNodeState_Unknown,
            ETournamentNodeState::k_ETournamentNodeState_Canceled,
            ETournamentNodeState::k_ETournamentNodeState_TeamsNotYetAssigned,
            ETournamentNodeState::k_ETournamentNodeState_InBetweenGames,
            ETournamentNodeState::k_ETournamentNodeState_GameInProgress,
            ETournamentNodeState::k_ETournamentNodeState_A_Won,
            ETournamentNodeState::k_ETournamentNodeState_B_Won,
            ETournamentNodeState::k_ETournamentNodeState_A_WonByForfeit,
            ETournamentNodeState::k_ETournamentNodeState_B_WonByForfeit,
            ETournamentNodeState::k_ETournamentNodeState_A_Bye,
            ETournamentNodeState::k_ETournamentNodeState_A_Abandoned,
            ETournamentNodeState::k_ETournamentNodeState_ServerFailure,
            ETournamentNodeState::k_ETournamentNodeState_A_TimeoutForfeit,
            ETournamentNodeState::k_ETournamentNodeState_A_TimeoutRefund,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<ETournamentNodeState>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ETournamentNodeState", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ETournamentNodeState {
}

impl ::protobuf::reflect::ProtobufValue for ETournamentNodeState {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EDOTAGroupMergeResult {
    k_EDOTAGroupMergeResult_OK = 0,
    k_EDOTAGroupMergeResult_FAILED_GENERIC = 1,
    k_EDOTAGroupMergeResult_NOT_LEADER = 2,
    k_EDOTAGroupMergeResult_TOO_MANY_PLAYERS = 3,
    k_EDOTAGroupMergeResult_TOO_MANY_COACHES = 4,
    k_EDOTAGroupMergeResult_ENGINE_MISMATCH = 5,
    k_EDOTAGroupMergeResult_NO_SUCH_GROUP = 6,
    k_EDOTAGroupMergeResult_OTHER_GROUP_NOT_OPEN = 7,
    k_EDOTAGroupMergeResult_ALREADY_INVITED = 8,
    k_EDOTAGroupMergeResult_NOT_INVITED = 9,
}

impl ::protobuf::ProtobufEnum for EDOTAGroupMergeResult {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EDOTAGroupMergeResult> {
        match value {
            0 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_OK),
            1 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_FAILED_GENERIC),
            2 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_NOT_LEADER),
            3 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_TOO_MANY_PLAYERS),
            4 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_TOO_MANY_COACHES),
            5 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_ENGINE_MISMATCH),
            6 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_NO_SUCH_GROUP),
            7 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_OTHER_GROUP_NOT_OPEN),
            8 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_ALREADY_INVITED),
            9 => ::std::option::Option::Some(EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_NOT_INVITED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EDOTAGroupMergeResult] = &[
            EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_OK,
            EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_FAILED_GENERIC,
            EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_NOT_LEADER,
            EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_TOO_MANY_PLAYERS,
            EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_TOO_MANY_COACHES,
            EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_ENGINE_MISMATCH,
            EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_NO_SUCH_GROUP,
            EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_OTHER_GROUP_NOT_OPEN,
            EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_ALREADY_INVITED,
            EDOTAGroupMergeResult::k_EDOTAGroupMergeResult_NOT_INVITED,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<EDOTAGroupMergeResult>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("EDOTAGroupMergeResult", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for EDOTAGroupMergeResult {
}

impl ::protobuf::reflect::ProtobufValue for EDOTAGroupMergeResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x17, 0x64, 0x6f, 0x74, 0x61, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e,
    0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x64, 0x6f, 0x74, 0x61, 0x2a,
    0x5e, 0x0a, 0x13, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65,
    0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75,
    0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
    0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75,
    0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
    0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x57, 0x69, 0x6e, 0x33, 0x10, 0x01, 0x2a,
    0xa8, 0x03, 0x0a, 0x14, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47,
    0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x54,
    0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
    0x74, 0x65, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f,
    0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d,
    0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10,
    0x01, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
    0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x63, 0x68, 0x65,
    0x64, 0x75, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x54, 0x6f,
    0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
    0x65, 0x5f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f,
    0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53,
    0x74, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x61, 0x64, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x10,
    0x14, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
    0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x44, 0x69, 0x72, 0x65,
    0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x15, 0x12, 0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45,
    0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74,
    0x61, 0x74, 0x65, 0x5f, 0x52, 0x61, 0x64, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x79,
    0x46, 0x6f, 0x72, 0x66, 0x65, 0x69, 0x74, 0x10, 0x16, 0x12, 0x2f, 0x0a, 0x2b, 0x6b, 0x5f, 0x45,
    0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74,
    0x61, 0x74, 0x65, 0x5f, 0x44, 0x69, 0x72, 0x65, 0x56, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x42,
    0x79, 0x46, 0x6f, 0x72, 0x66, 0x65, 0x69, 0x74, 0x10, 0x17, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f,
    0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53,
    0x74, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75,
    0x72, 0x65, 0x10, 0x28, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e,
    0x61, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4e,
    0x6f, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x29, 0x2a, 0xe7, 0x06, 0x0a, 0x14, 0x45,
    0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74,
    0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
    0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x6e,
    0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x54, 0x6f,
    0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74,
    0x65, 0x5f, 0x4e, 0x6f, 0x64, 0x65, 0x31, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x6b, 0x5f, 0x45,
    0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74,
    0x61, 0x74, 0x65, 0x5f, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x78, 0x10, 0x80, 0x08, 0x12, 0x26,
    0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54,
    0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x45, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61,
    0x74, 0x65, 0x64, 0x10, 0xb3, 0x6d, 0x12, 0x25, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75,
    0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65,
    0x5f, 0x46, 0x6f, 0x72, 0x66, 0x65, 0x69, 0x74, 0x65, 0x64, 0x10, 0xb4, 0x6d, 0x12, 0x27, 0x0a,
    0x22, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65,
    0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
    0x31, 0x73, 0x74, 0x10, 0x99, 0x75, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75,
    0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65,
    0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x32, 0x6e, 0x64, 0x10, 0x9a, 0x75, 0x12,
    0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
    0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
    0x65, 0x64, 0x33, 0x72, 0x64, 0x10, 0x9b, 0x75, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x54,
    0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
    0x74, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x34, 0x74, 0x68, 0x10, 0x9c,
    0x75, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
    0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x69,
    0x73, 0x68, 0x65, 0x64, 0x35, 0x74, 0x68, 0x10, 0x9d, 0x75, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f,
    0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53,
    0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x36, 0x74, 0x68,
    0x10, 0x9e, 0x75, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
    0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x69,
    0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x37, 0x74, 0x68, 0x10, 0x9f, 0x75, 0x12, 0x27, 0x0a, 0x22,
    0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61,
    0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x38,
    0x74, 0x68, 0x10, 0xa0, 0x75, 0x12, 0x27, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72,
    0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
    0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x39, 0x74, 0x68, 0x10, 0xa1, 0x75, 0x12, 0x28,
    0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54,
    0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
    0x64, 0x31, 0x30, 0x74, 0x68, 0x10, 0xa2, 0x75, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x54,
    0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61,
    0x74, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x31, 0x31, 0x74, 0x68, 0x10,
    0xa3, 0x75, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
    0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x69, 0x6e,
    0x69, 0x73, 0x68, 0x65, 0x64, 0x31, 0x32, 0x74, 0x68, 0x10, 0xa4, 0x75, 0x12, 0x28, 0x0a, 0x23,
    0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61,
    0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x31,
    0x33, 0x74, 0x68, 0x10, 0xa5, 0x75, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75,
    0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65,
    0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x31, 0x34, 0x74, 0x68, 0x10, 0xa6, 0x75,
    0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
    0x74, 0x54, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73,
    0x68, 0x65, 0x64, 0x31, 0x35, 0x74, 0x68, 0x10, 0xa7, 0x75, 0x12, 0x28, 0x0a, 0x23, 0x6b, 0x5f,
    0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x61, 0x6d, 0x53,
    0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x31, 0x36, 0x74,
    0x68, 0x10, 0xa8, 0x75, 0x2a, 0x86, 0x03, 0x0a, 0x10, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
    0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45,
    0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
    0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45,
    0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
    0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x10,
    0x01, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
    0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
    0x64, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
    0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64,
    0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d,
    0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46,
    0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x6b, 0x5f, 0x45, 0x54,
    0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x54,
    0x65, 0x61, 0x6d, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x10, 0x05, 0x12, 0x29,
    0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53,
    0x74, 0x61, 0x74, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
    0x46, 0x6f, 0x72, 0x66, 0x65, 0x69, 0x74, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45,
    0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
    0x54, 0x65, 0x61, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e,
    0x64, 0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
    0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67,
    0x72, 0x65, 0x73, 0x73, 0x10, 0x64, 0x12, 0x25, 0x0a, 0x21, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75,
    0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x57, 0x61, 0x69,
    0x74, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x10, 0x65, 0x2a, 0xcc, 0x04,
    0x0a, 0x14, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64,
    0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75,
    0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
    0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x6b, 0x5f,
    0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53,
    0x74, 0x61, 0x74, 0x65, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12,
    0x2e, 0x0a, 0x2a, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
    0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x4e,
    0x6f, 0x74, 0x59, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x10, 0x02, 0x12,
    0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
    0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x6e, 0x42, 0x65, 0x74, 0x77,
    0x65, 0x65, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x73, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f,
    0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53,
    0x74, 0x61, 0x74, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72,
    0x65, 0x73, 0x73, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72,
    0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f,
    0x41, 0x5f, 0x57, 0x6f, 0x6e, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x54, 0x6f,
    0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
    0x65, 0x5f, 0x42, 0x5f, 0x57, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45,
    0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74,
    0x61, 0x74, 0x65, 0x5f, 0x41, 0x5f, 0x57, 0x6f, 0x6e, 0x42, 0x79, 0x46, 0x6f, 0x72, 0x66, 0x65,
    0x69, 0x74, 0x10, 0x07, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e,
    0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x42,
    0x5f, 0x57, 0x6f, 0x6e, 0x42, 0x79, 0x46, 0x6f, 0x72, 0x66, 0x65, 0x69, 0x74, 0x10, 0x08, 0x12,
    0x20, 0x0a, 0x1c, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
    0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x5f, 0x42, 0x79, 0x65, 0x10,
    0x09, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65,
    0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x5f, 0x41, 0x62,
    0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x65, 0x64, 0x10, 0x0a, 0x12, 0x28, 0x0a, 0x24, 0x6b, 0x5f, 0x45,
    0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74,
    0x61, 0x74, 0x65, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
    0x65, 0x10, 0x0b, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
    0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x5f,
    0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x66, 0x65, 0x69, 0x74, 0x10, 0x0c,
    0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e,
    0x74, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x41, 0x5f, 0x54, 0x69, 0x6d,
    0x65, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x10, 0x0d, 0x2a, 0xc7, 0x03, 0x0a,
    0x15, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x72, 0x67, 0x65,
    0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x1a, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54,
    0x41, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
    0x74, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54,
    0x41, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
    0x74, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43,
    0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x72, 0x6f,
    0x75, 0x70, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4e, 0x4f,
    0x54, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f,
    0x45, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52,
    0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x50,
    0x4c, 0x41, 0x59, 0x45, 0x52, 0x53, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x6b, 0x5f, 0x45, 0x44,
    0x4f, 0x54, 0x41, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73,
    0x75, 0x6c, 0x74, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x43, 0x4f, 0x41,
    0x43, 0x48, 0x45, 0x53, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54,
    0x41, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
    0x74, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43,
    0x48, 0x10, 0x05, 0x12, 0x29, 0x0a, 0x25, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x72,
    0x6f, 0x75, 0x70, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4e,
    0x4f, 0x5f, 0x53, 0x55, 0x43, 0x48, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x06, 0x12, 0x30,
    0x0a, 0x2c, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
    0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f,
    0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x07,
    0x12, 0x2b, 0x0a, 0x27, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x72, 0x6f, 0x75, 0x70,
    0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x41, 0x4c, 0x52, 0x45,
    0x41, 0x44, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x27, 0x0a,
    0x23, 0x6b, 0x5f, 0x45, 0x44, 0x4f, 0x54, 0x41, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x72,
    0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x56,
    0x49, 0x54, 0x45, 0x44, 0x10, 0x09, 0x42, 0x05, 0x48, 0x01, 0x80, 0x01, 0x00, 0x4a, 0x8b, 0x18,
    0x0a, 0x06, 0x12, 0x04, 0x00, 0x00, 0x5a, 0x01, 0x0a, 0x08, 0x0a, 0x01, 0x0c, 0x12, 0x03, 0x00,
    0x00, 0x12, 0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x02, 0x08, 0x0c, 0x0a, 0x08, 0x0a, 0x01,
    0x08, 0x12, 0x03, 0x04, 0x00, 0x1c, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07, 0x00, 0x12, 0x03,
    0x04, 0x00, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x12, 0x03, 0x04, 0x07,
    0x13, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x12, 0x03, 0x04, 0x07, 0x13,
    0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x04, 0x07, 0x13,
    0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x00, 0x03, 0x12, 0x03, 0x04, 0x16, 0x1b, 0x0a, 0x08,
    0x0a, 0x01, 0x08, 0x12, 0x03, 0x05, 0x00, 0x23, 0x0a, 0x0b, 0x0a, 0x04, 0x08, 0xe7, 0x07, 0x01,
    0x12, 0x03, 0x05, 0x00, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x01, 0x02, 0x12, 0x03,
    0x05, 0x07, 0x1a, 0x0a, 0x0d, 0x0a, 0x06, 0x08, 0xe7, 0x07, 0x01, 0x02, 0x00, 0x12, 0x03, 0x05,
    0x07, 0x1a, 0x0a, 0x0e, 0x0a, 0x07, 0x08, 0xe7, 0x07, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x05,
    0x07, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x08, 0xe7, 0x07, 0x01, 0x03, 0x12, 0x03, 0x05, 0x1d, 0x22,
    0x0a, 0x0a, 0x0a, 0x02, 0x05, 0x00, 0x12, 0x04, 0x07, 0x00, 0x0a, 0x01, 0x0a, 0x0a, 0x0a, 0x03,
    0x05, 0x00, 0x01, 0x12, 0x03, 0x07, 0x05, 0x18, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x00,
    0x12, 0x03, 0x08, 0x08, 0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03,
    0x08, 0x08, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x00, 0x02, 0x12, 0x03, 0x08, 0x25,
    0x26, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x01, 0x12, 0x03, 0x09, 0x08, 0x30, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x09, 0x08, 0x2b, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x09, 0x2e, 0x2f, 0x0a, 0x0a, 0x0a, 0x02, 0x05, 0x01,
    0x12, 0x04, 0x0c, 0x00, 0x17, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x01, 0x01, 0x12, 0x03, 0x0c,
    0x05, 0x19, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x00, 0x12, 0x03, 0x0d, 0x08, 0x2b, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x0d, 0x08, 0x26, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x01, 0x02, 0x00, 0x02, 0x12, 0x03, 0x0d, 0x29, 0x2a, 0x0a, 0x0b, 0x0a, 0x04, 0x05,
    0x01, 0x02, 0x01, 0x12, 0x03, 0x0e, 0x08, 0x2c, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x01,
    0x01, 0x12, 0x03, 0x0e, 0x08, 0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x01, 0x02, 0x12,
    0x03, 0x0e, 0x2a, 0x2b, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x02, 0x12, 0x03, 0x0f, 0x08,
    0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x02, 0x01, 0x12, 0x03, 0x0f, 0x08, 0x28, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x02, 0x02, 0x12, 0x03, 0x0f, 0x2b, 0x2c, 0x0a, 0x0b, 0x0a,
    0x04, 0x05, 0x01, 0x02, 0x03, 0x12, 0x03, 0x10, 0x08, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01,
    0x02, 0x03, 0x01, 0x12, 0x03, 0x10, 0x08, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x03,
    0x02, 0x12, 0x03, 0x10, 0x28, 0x29, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x04, 0x12, 0x03,
    0x11, 0x08, 0x2f, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x04, 0x01, 0x12, 0x03, 0x11, 0x08,
    0x29, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x04, 0x02, 0x12, 0x03, 0x11, 0x2c, 0x2e, 0x0a,
    0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x05, 0x12, 0x03, 0x12, 0x08, 0x30, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x01, 0x02, 0x05, 0x01, 0x12, 0x03, 0x12, 0x08, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01,
    0x02, 0x05, 0x02, 0x12, 0x03, 0x12, 0x2d, 0x2f, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x06,
    0x12, 0x03, 0x13, 0x08, 0x38, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x06, 0x01, 0x12, 0x03,
    0x13, 0x08, 0x32, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x06, 0x02, 0x12, 0x03, 0x13, 0x35,
    0x37, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x07, 0x12, 0x03, 0x14, 0x08, 0x39, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x01, 0x02, 0x07, 0x01, 0x12, 0x03, 0x14, 0x08, 0x33, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x01, 0x02, 0x07, 0x02, 0x12, 0x03, 0x14, 0x36, 0x38, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01,
    0x02, 0x08, 0x12, 0x03, 0x15, 0x08, 0x32, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x08, 0x01,
    0x12, 0x03, 0x15, 0x08, 0x2c, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x08, 0x02, 0x12, 0x03,
    0x15, 0x2f, 0x31, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x01, 0x02, 0x09, 0x12, 0x03, 0x16, 0x08, 0x2e,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x01, 0x02, 0x09, 0x01, 0x12, 0x03, 0x16, 0x08, 0x28, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x01, 0x02, 0x09, 0x02, 0x12, 0x03, 0x16, 0x2b, 0x2d, 0x0a, 0x0a, 0x0a, 0x02,
    0x05, 0x02, 0x12, 0x04, 0x19, 0x00, 0x2f, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x02, 0x01, 0x12,
    0x03, 0x19, 0x05, 0x19, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02, 0x00, 0x12, 0x03, 0x1a, 0x08,
    0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x00, 0x01, 0x12, 0x03, 0x1a, 0x08, 0x26, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x00, 0x02, 0x12, 0x03, 0x1a, 0x29, 0x2a, 0x0a, 0x0b, 0x0a,
    0x04, 0x05, 0x02, 0x02, 0x01, 0x12, 0x03, 0x1b, 0x08, 0x29, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02,
    0x02, 0x01, 0x01, 0x12, 0x03, 0x1b, 0x08, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x01,
    0x02, 0x12, 0x03, 0x1b, 0x27, 0x28, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02, 0x02, 0x12, 0x03,
    0x1c, 0x08, 0x2e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x02, 0x01, 0x12, 0x03, 0x1c, 0x08,
    0x26, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x02, 0x02, 0x12, 0x03, 0x1c, 0x29, 0x2d, 0x0a,
    0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02, 0x03, 0x12, 0x03, 0x1d, 0x08, 0x32, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x02, 0x02, 0x03, 0x01, 0x12, 0x03, 0x1d, 0x08, 0x29, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02,
    0x02, 0x03, 0x02, 0x12, 0x03, 0x1d, 0x2c, 0x31, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02, 0x04,
    0x12, 0x03, 0x1e, 0x08, 0x31, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x04, 0x01, 0x12, 0x03,
    0x1e, 0x08, 0x28, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x04, 0x02, 0x12, 0x03, 0x1e, 0x2b,
    0x30, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02, 0x05, 0x12, 0x03, 0x1f, 0x08, 0x33, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x02, 0x02, 0x05, 0x01, 0x12, 0x03, 0x1f, 0x08, 0x2a, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x02, 0x02, 0x05, 0x02, 0x12, 0x03, 0x1f, 0x2d, 0x32, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02,
    0x02, 0x06, 0x12, 0x03, 0x20, 0x08, 0x33, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x06, 0x01,
    0x12, 0x03, 0x20, 0x08, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x06, 0x02, 0x12, 0x03,
    0x20, 0x2d, 0x32, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02, 0x07, 0x12, 0x03, 0x21, 0x08, 0x33,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x07, 0x01, 0x12, 0x03, 0x21, 0x08, 0x2a, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x02, 0x02, 0x07, 0x02, 0x12, 0x03, 0x21, 0x2d, 0x32, 0x0a, 0x0b, 0x0a, 0x04,
    0x05, 0x02, 0x02, 0x08, 0x12, 0x03, 0x22, 0x08, 0x33, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02,
    0x08, 0x01, 0x12, 0x03, 0x22, 0x08, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x08, 0x02,
    0x12, 0x03, 0x22, 0x2d, 0x32, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02, 0x09, 0x12, 0x03, 0x23,
    0x08, 0x33, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x09, 0x01, 0x12, 0x03, 0x23, 0x08, 0x2a,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x09, 0x02, 0x12, 0x03, 0x23, 0x2d, 0x32, 0x0a, 0x0b,
    0x0a, 0x04, 0x05, 0x02, 0x02, 0x0a, 0x12, 0x03, 0x24, 0x08, 0x33, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x02, 0x02, 0x0a, 0x01, 0x12, 0x03, 0x24, 0x08, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02,
    0x0a, 0x02, 0x12, 0x03, 0x24, 0x2d, 0x32, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02, 0x0b, 0x12,
    0x03, 0x25, 0x08, 0x33, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x0b, 0x01, 0x12, 0x03, 0x25,
    0x08, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x0b, 0x02, 0x12, 0x03, 0x25, 0x2d, 0x32,
    0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02, 0x0c, 0x12, 0x03, 0x26, 0x08, 0x33, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x02, 0x02, 0x0c, 0x01, 0x12, 0x03, 0x26, 0x08, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x02, 0x02, 0x0c, 0x02, 0x12, 0x03, 0x26, 0x2d, 0x32, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02,
    0x0d, 0x12, 0x03, 0x27, 0x08, 0x33, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x0d, 0x01, 0x12,
    0x03, 0x27, 0x08, 0x2a, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x0d, 0x02, 0x12, 0x03, 0x27,
    0x2d, 0x32, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02, 0x0e, 0x12, 0x03, 0x28, 0x08, 0x34, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x0e, 0x01, 0x12, 0x03, 0x28, 0x08, 0x2b, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x02, 0x02, 0x0e, 0x02, 0x12, 0x03, 0x28, 0x2e, 0x33, 0x0a, 0x0b, 0x0a, 0x04, 0x05,
    0x02, 0x02, 0x0f, 0x12, 0x03, 0x29, 0x08, 0x34, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x0f,
    0x01, 0x12, 0x03, 0x29, 0x08, 0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x0f, 0x02, 0x12,
    0x03, 0x29, 0x2e, 0x33, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02, 0x10, 0x12, 0x03, 0x2a, 0x08,
    0x34, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x10, 0x01, 0x12, 0x03, 0x2a, 0x08, 0x2b, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x10, 0x02, 0x12, 0x03, 0x2a, 0x2e, 0x33, 0x0a, 0x0b, 0x0a,
    0x04, 0x05, 0x02, 0x02, 0x11, 0x12, 0x03, 0x2b, 0x08, 0x34, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02,
    0x02, 0x11, 0x01, 0x12, 0x03, 0x2b, 0x08, 0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x11,
    0x02, 0x12, 0x03, 0x2b, 0x2e, 0x33, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02, 0x12, 0x12, 0x03,
    0x2c, 0x08, 0x34, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x12, 0x01, 0x12, 0x03, 0x2c, 0x08,
    0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x12, 0x02, 0x12, 0x03, 0x2c, 0x2e, 0x33, 0x0a,
    0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02, 0x13, 0x12, 0x03, 0x2d, 0x08, 0x34, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x02, 0x02, 0x13, 0x01, 0x12, 0x03, 0x2d, 0x08, 0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02,
    0x02, 0x13, 0x02, 0x12, 0x03, 0x2d, 0x2e, 0x33, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x02, 0x02, 0x14,
    0x12, 0x03, 0x2e, 0x08, 0x34, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x14, 0x01, 0x12, 0x03,
    0x2e, 0x08, 0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x02, 0x02, 0x14, 0x02, 0x12, 0x03, 0x2e, 0x2e,
    0x33, 0x0a, 0x0a, 0x0a, 0x02, 0x05, 0x03, 0x12, 0x04, 0x31, 0x00, 0x3c, 0x01, 0x0a, 0x0a, 0x0a,
    0x03, 0x05, 0x03, 0x01, 0x12, 0x03, 0x31, 0x05, 0x15, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x03, 0x02,
    0x00, 0x12, 0x03, 0x32, 0x08, 0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x00, 0x01, 0x12,
    0x03, 0x32, 0x08, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x00, 0x02, 0x12, 0x03, 0x32,
    0x25, 0x26, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x03, 0x02, 0x01, 0x12, 0x03, 0x33, 0x08, 0x2f, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x01, 0x01, 0x12, 0x03, 0x33, 0x08, 0x2a, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x03, 0x02, 0x01, 0x02, 0x12, 0x03, 0x33, 0x2d, 0x2e, 0x0a, 0x0b, 0x0a, 0x04, 0x05,
    0x03, 0x02, 0x02, 0x12, 0x03, 0x34, 0x08, 0x29, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x02,
    0x01, 0x12, 0x03, 0x34, 0x08, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x02, 0x02, 0x12,
    0x03, 0x34, 0x27, 0x28, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x03, 0x02, 0x03, 0x12, 0x03, 0x35, 0x08,
    0x26, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x03, 0x01, 0x12, 0x03, 0x35, 0x08, 0x21, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x03, 0x02, 0x12, 0x03, 0x35, 0x24, 0x25, 0x0a, 0x0b, 0x0a,
    0x04, 0x05, 0x03, 0x02, 0x04, 0x12, 0x03, 0x36, 0x08, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03,
    0x02, 0x04, 0x01, 0x12, 0x03, 0x36, 0x08, 0x28, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x04,
    0x02, 0x12, 0x03, 0x36, 0x2b, 0x2c, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x03, 0x02, 0x05, 0x12, 0x03,
    0x37, 0x08, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x05, 0x01, 0x12, 0x03, 0x37, 0x08,
    0x28, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x05, 0x02, 0x12, 0x03, 0x37, 0x2b, 0x2c, 0x0a,
    0x0b, 0x0a, 0x04, 0x05, 0x03, 0x02, 0x06, 0x12, 0x03, 0x38, 0x08, 0x32, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x03, 0x02, 0x06, 0x01, 0x12, 0x03, 0x38, 0x08, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03,
    0x02, 0x06, 0x02, 0x12, 0x03, 0x38, 0x30, 0x31, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x03, 0x02, 0x07,
    0x12, 0x03, 0x39, 0x08, 0x31, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x07, 0x01, 0x12, 0x03,
    0x39, 0x08, 0x2c, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x07, 0x02, 0x12, 0x03, 0x39, 0x2f,
    0x30, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x03, 0x02, 0x08, 0x12, 0x03, 0x3a, 0x08, 0x2c, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x03, 0x02, 0x08, 0x01, 0x12, 0x03, 0x3a, 0x08, 0x25, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x03, 0x02, 0x08, 0x02, 0x12, 0x03, 0x3a, 0x28, 0x2b, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x03,
    0x02, 0x09, 0x12, 0x03, 0x3b, 0x08, 0x30, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x09, 0x01,
    0x12, 0x03, 0x3b, 0x08, 0x29, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x03, 0x02, 0x09, 0x02, 0x12, 0x03,
    0x3b, 0x2c, 0x2f, 0x0a, 0x0a, 0x0a, 0x02, 0x05, 0x04, 0x12, 0x04, 0x3e, 0x00, 0x4d, 0x01, 0x0a,
    0x0a, 0x0a, 0x03, 0x05, 0x04, 0x01, 0x12, 0x03, 0x3e, 0x05, 0x19, 0x0a, 0x0b, 0x0a, 0x04, 0x05,
    0x04, 0x02, 0x00, 0x12, 0x03, 0x3f, 0x08, 0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x00,
    0x01, 0x12, 0x03, 0x3f, 0x08, 0x26, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x00, 0x02, 0x12,
    0x03, 0x3f, 0x29, 0x2a, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x01, 0x12, 0x03, 0x40, 0x08,
    0x2c, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x01, 0x01, 0x12, 0x03, 0x40, 0x08, 0x27, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x01, 0x02, 0x12, 0x03, 0x40, 0x2a, 0x2b, 0x0a, 0x0b, 0x0a,
    0x04, 0x05, 0x04, 0x02, 0x02, 0x12, 0x03, 0x41, 0x08, 0x37, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04,
    0x02, 0x02, 0x01, 0x12, 0x03, 0x41, 0x08, 0x32, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x02,
    0x02, 0x12, 0x03, 0x41, 0x35, 0x36, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x03, 0x12, 0x03,
    0x42, 0x08, 0x32, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x03, 0x01, 0x12, 0x03, 0x42, 0x08,
    0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x03, 0x02, 0x12, 0x03, 0x42, 0x30, 0x31, 0x0a,
    0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x04, 0x12, 0x03, 0x43, 0x08, 0x32, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x04, 0x02, 0x04, 0x01, 0x12, 0x03, 0x43, 0x08, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04,
    0x02, 0x04, 0x02, 0x12, 0x03, 0x43, 0x30, 0x31, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x05,
    0x12, 0x03, 0x44, 0x08, 0x29, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x05, 0x01, 0x12, 0x03,
    0x44, 0x08, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x05, 0x02, 0x12, 0x03, 0x44, 0x27,
    0x28, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x06, 0x12, 0x03, 0x45, 0x08, 0x29, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x04, 0x02, 0x06, 0x01, 0x12, 0x03, 0x45, 0x08, 0x24, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x04, 0x02, 0x06, 0x02, 0x12, 0x03, 0x45, 0x27, 0x28, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04,
    0x02, 0x07, 0x12, 0x03, 0x46, 0x08, 0x32, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x07, 0x01,
    0x12, 0x03, 0x46, 0x08, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x07, 0x02, 0x12, 0x03,
    0x46, 0x30, 0x31, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x08, 0x12, 0x03, 0x47, 0x08, 0x32,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x08, 0x01, 0x12, 0x03, 0x47, 0x08, 0x2d, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x04, 0x02, 0x08, 0x02, 0x12, 0x03, 0x47, 0x30, 0x31, 0x0a, 0x0b, 0x0a, 0x04,
    0x05, 0x04, 0x02, 0x09, 0x12, 0x03, 0x48, 0x08, 0x29, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02,
    0x09, 0x01, 0x12, 0x03, 0x48, 0x08, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x09, 0x02,
    0x12, 0x03, 0x48, 0x27, 0x28, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x0a, 0x12, 0x03, 0x49,
    0x08, 0x30, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x0a, 0x01, 0x12, 0x03, 0x49, 0x08, 0x2a,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x0a, 0x02, 0x12, 0x03, 0x49, 0x2d, 0x2f, 0x0a, 0x0b,
    0x0a, 0x04, 0x05, 0x04, 0x02, 0x0b, 0x12, 0x03, 0x4a, 0x08, 0x32, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x04, 0x02, 0x0b, 0x01, 0x12, 0x03, 0x4a, 0x08, 0x2c, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02,
    0x0b, 0x02, 0x12, 0x03, 0x4a, 0x2f, 0x31, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x0c, 0x12,
    0x03, 0x4b, 0x08, 0x35, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x0c, 0x01, 0x12, 0x03, 0x4b,
    0x08, 0x2f, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x04, 0x02, 0x0c, 0x02, 0x12, 0x03, 0x4b, 0x32, 0x34,
    0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x04, 0x02, 0x0d, 0x12, 0x03, 0x4c, 0x08, 0x34, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x04, 0x02, 0x0d, 0x01, 0x12, 0x03, 0x4c, 0x08, 0x2e, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x04, 0x02, 0x0d, 0x02, 0x12, 0x03, 0x4c, 0x31, 0x33, 0x0a, 0x0a, 0x0a, 0x02, 0x05, 0x05, 0x12,
    0x04, 0x4f, 0x00, 0x5a, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x05, 0x05, 0x01, 0x12, 0x03, 0x4f, 0x05,
    0x1a, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x05, 0x02, 0x00, 0x12, 0x03, 0x50, 0x08, 0x27, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x05, 0x02, 0x00, 0x01, 0x12, 0x03, 0x50, 0x08, 0x22, 0x0a, 0x0c, 0x0a, 0x05,
    0x05, 0x05, 0x02, 0x00, 0x02, 0x12, 0x03, 0x50, 0x25, 0x26, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x05,
    0x02, 0x01, 0x12, 0x03, 0x51, 0x08, 0x33, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x01, 0x01,
    0x12, 0x03, 0x51, 0x08, 0x2e, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x01, 0x02, 0x12, 0x03,
    0x51, 0x31, 0x32, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x05, 0x02, 0x02, 0x12, 0x03, 0x52, 0x08, 0x2f,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x02, 0x01, 0x12, 0x03, 0x52, 0x08, 0x2a, 0x0a, 0x0c,
    0x0a, 0x05, 0x05, 0x05, 0x02, 0x02, 0x02, 0x12, 0x03, 0x52, 0x2d, 0x2e, 0x0a, 0x0b, 0x0a, 0x04,
    0x05, 0x05, 0x02, 0x03, 0x12, 0x03, 0x53, 0x08, 0x35, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02,
    0x03, 0x01, 0x12, 0x03, 0x53, 0x08, 0x30, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x03, 0x02,
    0x12, 0x03, 0x53, 0x33, 0x34, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x05, 0x02, 0x04, 0x12, 0x03, 0x54,
    0x08, 0x35, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x04, 0x01, 0x12, 0x03, 0x54, 0x08, 0x30,
    0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x04, 0x02, 0x12, 0x03, 0x54, 0x33, 0x34, 0x0a, 0x0b,
    0x0a, 0x04, 0x05, 0x05, 0x02, 0x05, 0x12, 0x03, 0x55, 0x08, 0x34, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x05, 0x02, 0x05, 0x01, 0x12, 0x03, 0x55, 0x08, 0x2f, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02,
    0x05, 0x02, 0x12, 0x03, 0x55, 0x32, 0x33, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x05, 0x02, 0x06, 0x12,
    0x03, 0x56, 0x08, 0x32, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x06, 0x01, 0x12, 0x03, 0x56,
    0x08, 0x2d, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x06, 0x02, 0x12, 0x03, 0x56, 0x30, 0x31,
    0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x05, 0x02, 0x07, 0x12, 0x03, 0x57, 0x08, 0x39, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x05, 0x02, 0x07, 0x01, 0x12, 0x03, 0x57, 0x08, 0x34, 0x0a, 0x0c, 0x0a, 0x05, 0x05,
    0x05, 0x02, 0x07, 0x02, 0x12, 0x03, 0x57, 0x37, 0x38, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x05, 0x02,
    0x08, 0x12, 0x03, 0x58, 0x08, 0x34, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x08, 0x01, 0x12,
    0x03, 0x58, 0x08, 0x2f, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x08, 0x02, 0x12, 0x03, 0x58,
    0x32, 0x33, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x05, 0x02, 0x09, 0x12, 0x03, 0x59, 0x08, 0x30, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x05, 0x02, 0x09, 0x01, 0x12, 0x03, 0x59, 0x08, 0x2b, 0x0a, 0x0c, 0x0a,
    0x05, 0x05, 0x05, 0x02, 0x09, 0x02, 0x12, 0x03, 0x59, 0x2e, 0x2f,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
